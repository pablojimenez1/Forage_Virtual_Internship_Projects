from http.server import BaseHTTPRequestHandler, HTTPServer
import json

host = "localhost"
port = 8000

# List of blacklisted IPs for simplicity. This could be extended to more complex rules.
BLACKLISTED_IPS = ["192.168.1.100", "203.0.113.42"]

# Example of detecting malicious patterns in headers or request content
def is_malicious_request(headers, body):
    # Check for known malicious patterns in the payload
    if "class.module.classLoader.resources.context.parent.pipeline.first.pattern" in body:
        return True
    if any(keyword in body for keyword in ["cmd", "pwd", "Runtime", "InputStream"]):
        return True
    return False

def block_request(self):
    self.send_response(403)  # Forbidden status code
    self.send_header("content-type", "application/json")
    self.end_headers()
    response = {"message": "Request blocked by the firewall."}
    self.wfile.write(json.dumps(response).encode("utf-8"))

def handle_request(self):
    client_ip = self.client_address[0]

    # Check if the IP is blacklisted
    if client_ip in BLACKLISTED_IPS:
        print(f"Blocking request from blacklisted IP: {client_ip}")
        block_request(self)
        return

    # Parse headers and body for malicious patterns
    content_length = int(self.headers.get('Content-Length', 0))
    body = self.rfile.read(content_length).decode('utf-8') if content_length > 0 else ""

    if is_malicious_request(self.headers, body):
        print(f"Blocking malicious request from IP: {client_ip}")
        block_request(self)
        return

    # Allow the request if no issues are detected
    self.send_response(200)
    self.send_header("content-type", "application/json")
    self.end_headers()
    response = {"message": "Request allowed."}
    self.wfile.write(json.dumps(response).encode("utf-8"))

class ServerHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        handle_request(self)

    def do_POST(self):
        handle_request(self)

if __name__ == "__main__":
    server = HTTPServer((host, port), ServerHandler)
    print("[+] Firewall Server")
    print(f"[+] HTTP Web Server running on: {host}:{port}")

    try:
        server.serve_forever()
    except KeyboardInterrupt:
        pass

    server.server_close()
    print("[+] Server terminated. Exiting...")
    exit(0)
